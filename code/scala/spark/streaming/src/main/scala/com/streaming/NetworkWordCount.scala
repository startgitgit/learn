/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// scalastyle:off println
package com.streaming

import org.apache.spark.SparkConf
import org.apache.spark.storage.StorageLevel
import org.apache.spark.streaming.{Seconds, StreamingContext}

/**
  * Counts words in UTF8 encoded, '\n' delimited text received from the network every second.
  *
  * Usage: NetworkWordCount <hostname> <port>
  * <hostname> and <port> describe the TCP server that Spark Streaming would connect to receive data.
  *
  * To run this on your local machine, you need to first run a Netcat server
  * `$ nc -lk 9999`
  * and then run the example
  * `$ bin/run-example org.apache.spark.examples.streaming.NetworkWordCount localhost 9999`
  */
object NetworkWordCount {
  val sparkConf: SparkConf = new SparkConf().setAppName("NetworkWordCount")
  val ssc = new StreamingContext(sparkConf, Seconds(10))

  def main(args: Array[String]) {
    if (args.length < 2) {
      System.err.println("Usage: NetworkWordCount <hostname> <port>")
      System.exit(1)
    }
    var me = "sdf"
    // Create the context with a 1 second batch size
    // Create a socket stream on target ip:port and count the
    // words in input stream of \n delimited text (eg. generated by 'nc')
    // Note that no duplication in storage level only for running locally.
    // Replication necessary in distributed scenario for fault tolerance.
    val lines = ssc.socketTextStream(args(0), args(1).toInt, StorageLevel.MEMORY_AND_DISK_SER)
    //    lines.foreachRDD((rdd, time) => {
    //      if (!rdd.isEmpty())
    //        me = rdd.first()
    //      println("------------hei me is--------------:" + me)
    //      println(time)
    //    })


    val words = lines.flatMap(_.split(" "))
    val wordsWindow = words.transform((rdd, time) => {
      println("----------------time is-----------:" + time.milliseconds)
      rdd.map(x => {
        (x, time)
      })
    }).window(Seconds(40), Seconds(10))
    //    val wordCounts = wordsWindow.map(x => (x, 1)).reduceByKey(_ + _)
//    wordsWindow.print()

    val wordsWindowFilter = wordsWindow.transform((rdd, time) => {
      rdd.filter(x => {
        if (x._2.milliseconds <= time.milliseconds-20000) true else false
      })
    })

    wordsWindowFilter.print()
    ssc.start()
    ssc.awaitTermination()
  }
}
